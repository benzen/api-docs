===== Name
cljs.core/for

===== Type
macro

===== Signature
[seq-exprs body-expr]

===== Description

List comprehension.

Takes a vector of one or more binding-form/collection-expr pairs, each followed
by zero or more modifiers, and yields a lazy sequence of evaluations of expr.

Collections are iterated in a nested fashion, rightmost fastest, and nested
coll-exprs can refer to bindings created in prior binding-forms. Supported
modifiers are: `:let [binding-form expr ...]`, `:while test`, `:when test`.

===== Example

```
(for [a [1 2 3]] (println a))
;; => 1
;; => 2
;; => 3

(for [b {:k "v" :l "w"}] (println b))
;; => [:k "v"]
;; => [:l "w"]

(for [a [1 2]
      b [2 1]]
      [a b])
;; => ([1 2] [1 1] [2 2] [2 1])

```

===== Related
cljs.core/doseq
cljs.core/doall
cljs.core/recur

===== TODO

This description is completely unreadable to someone new to the
language and confusing even to someone with moderate experience (ie: me)

Need to simplify and provide an inline example.
