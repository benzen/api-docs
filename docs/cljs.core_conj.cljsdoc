===== Name
cljs.core/conj

===== Signature
[]
[coll]
[coll x]
[coll x & xs]

===== Description

conj(oin)

Returns a new collection with the `x`s "added" to `coll`.

The "addition" may happen at different "places" depending on the collection
type.

`(conj nil item)` returns `(item)`.

===== Related
cljs.core/cons
cljs.core/into
cljs.core/peek
cljs.core/pop

===== Example#8c2a84

```
;; add at the end for vector
(conj [1 2 3] 4)
;; => [1 2 3 4]

;; add at front for list
(conj (list 1 2 3) 0)
;; => (0 1 2 3)

;;adding to a map
(conj {:key "value" :key2 "value2"} {:key3 "value3"})
;; => {:key3 "value3", :key "value" :key2 "value2"}

;; add element to set
(conj #{"a" "b" "c"} "d")
;; => #{"d" "a" "b" "c"}

;;adding a set to another set
(conj #{"a" "b" "c"} #{"d"})
;; => #{"a" #{"d"} "b" "c"}

```

===== TODO
should add a table here of how things are "added" to different collection types
