===== Name
cljs.core/tree-seq

===== Signature
[branch? children root]

===== Description

Returns a lazy sequence of the nodes in a tree, via a depth-first walk.

`branch?` must be a function of one argument that returns true if passed a node
that can have children (but may not).

`children` must be a function of one argument that returns a sequence of the
children. `children` will only be called on nodes for which `branch?` returns
true.

`root` is the root node of the tree.

===== Example 

```
(def l1 "leaf 1")
(def l2 "leaf 2")
(def b1 [l1 l2])
(def l21 "leaf 21")
(def l21 "leaf 22")
(def b2 [l22 l21])
(def root [b1 b2])

(defn branch? [node] (not (string? node)))
(defn children [node] (seq node))
(tree-seq branch? children root)
;; => ([["leaf 1" "leaf 2"] [nil "leaf 22"]] ["leaf 1" "leaf 2"] "leaf 1" "leaf 2" [nil "leaf 22"] nil "leaf 22")
```

===== Related
