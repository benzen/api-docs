===== Name
cljs.core/cond

===== Type
macro

===== Signature
[& clauses]

===== Description

`clauses` must be an even number of forms, ie: `(cond t1 e1, t2 e2, t3 e3)`.
Each test `t` is evaluated one at a time. If a test returns logical true, `cond`
evaluates and returns the corresponding expression `e` and does not evaluate any
of the other tests or expressions.

It is idiomatic to provide a default case as the last test pair using the
keyword `:else` (a keyword always evaluates to logical true).

`(cond)` returns nil.

===== Example#0cc9ac

```
(def a 42)
(cond (< a 10) (println "a is less than 10")
      (= a 42) (println "a us 42")
      (> a 50) (println "a is bigger than 50"))

;;=>"a is less than 10"

(def b 43)
(cond (even? b) (println "b is an even number")
      :else (println "b should be an odd number, since it's not an even number"))
;;=>"b should be an odd number, since it's not an even number"

(def c 10)
(println 
  (str "cond say's" (cond (number? c) (println "C is a number")))
```

===== Related
cljs.core/condp
cljs.core/case
special/if
